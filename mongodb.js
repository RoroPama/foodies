import { MongoClient, GridFSBucket, ObjectId } from "mongodb";

const uri = process.env.MONGODB_URI;
const dbName = process.env.MONGODB_DB_NAME;

let cachedClient = null;
let cachedDb = null;

//Donn√©es simul√©es pour le d√©veloppement et le build
const mockData = {
  meals: [
    {
      _id: "mock-1",
      title: "Burger Juteux",
      slug: "burger-juteux",
      image: {
        id: "mock-image-1",
        filename: "burger.jpg",
        contentType: "image/jpeg",
      },
      summary: "Un burger d√©licieux et juteux avec tous les accompagnements.",
      instructions:
        "Pr√©parez les ingr√©dients et assemblez votre burger parfait...",
      creator: "Chef John",
      creator_email: "john@example.com",
      createdAt: new Date("2024-01-01"),
    },
    {
      _id: "mock-2",
      title: "Curry √âpic√©",
      slug: "curry-epice",
      image: {
        id: "mock-image-2",
        filename: "curry.jpg",
        contentType: "image/jpeg",
      },
      summary: "Un curry √©pic√© et savoureux aux l√©gumes frais.",
      instructions: "Faites revenir les √©pices et ajoutez les l√©gumes...",
      creator: "Chef Sarah",
      creator_email: "sarah@example.com",
      createdAt: new Date("2024-01-02"),
    },
    {
      _id: "mock-3",
      title: "Dumplings Maison",
      slug: "dumplings-maison",
      image: {
        id: "mock-image-3",
        filename: "dumplings.jpg",
        contentType: "image/jpeg",
      },
      summary: "Des dumplings faits maison avec une farce savoureuse.",
      instructions:
        "Pr√©parez la p√¢te et la farce, puis formez les dumplings...",
      creator: "Chef Li",
      creator_email: "li@example.com",
      createdAt: new Date("2024-01-03"),
    },
    {
      _id: "mock-4",
      title: "Macaroni au Fromage Classique",
      slug: "macaroni-au-fromage-classique",
      image: {
        id: "mock-image-4",
        filename: "macaroni.jpg",
        contentType: "image/jpeg",
      },
      summary: "Le classique mac and cheese, r√©confortant et cr√©meux.",
      instructions: "Cuisez les p√¢tes, pr√©parez la sauce au fromage...",
      creator: "Chef Marie",
      creator_email: "marie@example.com",
      createdAt: new Date("2024-01-04"),
    },
  ],
};

export function getMockData(collection) {
  return mockData[collection] || [];
}

export async function connectToDatabase() {
  // ‚úÖ D√©tection am√©lior√©e de l'environnement de build
  const isBuildTime = process.env.NEXT_PHASE === "phase-production-build";
  //  ||
  // process.env.VERCEL_ENV === "build";
  console.log(`etat: ${process.env.NEXT_PHASE} ${process.env.VERCEL_ENV}`);
  // S√©paration claire des responsabilit√©s
  if (isBuildTime) {
    // Donn√©es simul√©es UNIQUEMENT pendant le build
    return { client: null, db: null, isMockConnection: true };
  }

  if (!uri) {
    // En runtime, si pas d'URI = erreur fatale
    throw new Error("MONGODB_URI est requis en production");
  }

  try {
    // Utiliser le cache si disponible en d√©veloppement
    if (cachedClient && cachedDb && process.env.NODE_ENV === "development") {
      console.log("üì¶ Utilisation de la connexion mise en cache");
      return {
        client: cachedClient,
        db: cachedDb,
        isMockConnection: false,
      };
    }

    console.log("üîó Connexion √† MongoDB...");
    const client = new MongoClient(uri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      connectTimeoutMS: 5000,
      socketTimeoutMS: 5000,
    });

    await client.connect();
    const db = client.db(dbName);

    // Test de la connexion
    await db.admin().ping();
    console.log("‚úÖ Connexion MongoDB √©tablie avec succ√®s");

    // Mise en cache pour le d√©veloppement uniquement
    if (process.env.NODE_ENV === "development") {
      cachedClient = client;
      cachedDb = db;
    }

    return {
      client,
      db,
      isMockConnection: false,
    };
  } catch (error) {
    console.error("‚ùå Erreur de connexion MongoDB:", error);
    console.log("üîÑ Basculement vers les donn√©es simul√©es");

    return {
      client: null,
      db: null,
      isMockConnection: true,
    };
  }
}

export async function getImageFromGridFS(db, fileId) {
  // V√©rifier si c'est une connexion simul√©e (pendant le build) ou si db est null
  if (!db) {
    console.log(
      "Connexion simul√©e ou db null, impossible de r√©cup√©rer l'image"
    );
    return null;
  }

  try {
    // Convertir l'ID en ObjectId valide
    let objectId;
    try {
      objectId = new ObjectId(fileId);
    } catch (err) {
      console.error(`ID de fichier non valide '${fileId}':`, err);
      return null;
    }

    return new Promise((resolve, reject) => {
      const bucket = new GridFSBucket(db);
      const chunks = [];

      const downloadStream = bucket.openDownloadStream(objectId);

      downloadStream.on("data", (chunk) => {
        chunks.push(chunk);
      });

      downloadStream.on("error", (err) => {
        console.error("Erreur lors du t√©l√©chargement depuis GridFS:", err);
        reject(err);
      });

      downloadStream.on("end", () => {
        const buffer = Buffer.concat(chunks);
        resolve(buffer);
      });
    });
  } catch (err) {
    console.error("Erreur lors de la r√©cup√©ration depuis GridFS:", err);
    return null;
  }
}

export async function storeImageInGridFS(
  db,
  imageBuffer,
  filename,
  contentType
) {
  // V√©rifier si c'est une connexion simul√©e (pendant le build) ou si db est null
  if (!db) {
    console.log(
      "Connexion simul√©e ou db null, retourne un ID fictif pour GridFS"
    );
    return "mock-file-id-" + Date.now();
  }

  return new Promise((resolve, reject) => {
    try {
      const bucket = new GridFSBucket(db);

      // Cr√©er un stream lisible √† partir du buffer
      const readableStream = new Readable();
      readableStream._read = () => {}; // Impl√©mentation requise pour le Readable stream
      readableStream.push(imageBuffer);
      readableStream.push(null);

      // Cr√©er un stream d'upload vers GridFS avec des m√©tadonn√©es suppl√©mentaires
      const uploadStream = bucket.openUploadStream(filename, {
        contentType: contentType,
        metadata: {
          uploadDate: new Date(),
          source: "application-upload",
        },
      });

      // G√©rer les √©v√©nements
      uploadStream.on("error", (err) => {
        console.error("Erreur lors de l'upload vers GridFS:", err);
        reject(err);
      });

      uploadStream.on("finish", function () {
        console.log(`Fichier ${filename} upload√© avec succ√®s, ID:`, this.id);
        resolve(this.id); // 'this' fait r√©f√©rence √† uploadStream
      });

      // Pipe le stream de lecture vers le stream d'upload
      readableStream.pipe(uploadStream);
    } catch (err) {
      console.error("Erreur lors de la cr√©ation du stream GridFS:", err);
      // Fallback en cas d'erreur
      resolve("mock-file-id-error-" + Date.now());
    }
  });
}
